use rust_dbg::graph::Graph;
use debruijn::{kmer, Kmer};
use std::fs::File;
use std::io::{BufWriter, Write};
use std::path::PathBuf;
use serde::{Serialize, Deserialize};
use std::time::Instant;
use clap::{Parser, Subcommand};

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Cli {
    /// K-mer size
    #[arg(short, default_value_t = 31)]
    k_size: usize,

    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// Create a graph from unitigs file
    Build {
        /// Path to the input unitigs file (as generated by ggcat)
        #[arg(short, long)]
        input: PathBuf,

        /// Path to save the binary graph
        #[arg(short, long)]
        output: PathBuf,

        /// Indicate if the unitigs are stranded
        #[arg(short, long, default_value_t = false)]
        stranded: bool,
    },
    /// Get stats about an allready generated graph
    Stats {
        /// Path to the binary graph
        #[arg(short, long)]
        input: PathBuf,
    },
}

impl Commands {
    fn run<K: Kmer + Send + Sync + Serialize + for<'a> Deserialize<'a>>(&self) {
        match self {
            Commands::Build { input, output, stranded } => {
                eprint!("Creating graph (parallel)... ");
                std::io::stderr().flush().unwrap();
                let start = Instant::now();
                let graph = Graph::<K>::from_unitigs(input, *stranded);
                let duration = start.elapsed();
                eprintln!("done in {:?}", duration);
        
                eprint!("Saving graph... ");
                std::io::stderr().flush().unwrap();
                let start = Instant::now();
        
                let f = BufWriter::new(File::create(output).unwrap());
                graph.save_to_binary(Box::new(f)).unwrap();
        
                let duration = start.elapsed();
                eprintln!("done in {:?}", duration);
            },
            Commands::Stats { input } => {
                let graph = Graph::<K>::load_from_binary(input).unwrap();
                let mut nb_edges: usize = 0;
                let mut node_length: usize = 0;
                for node in graph.iter_nodes() {
                    node_length += node.len();
                    let exts = node.exts();
                    nb_edges +=  (exts.num_exts_l() + exts.num_exts_r()) as usize;
                }
                eprintln!("Graph contains:\n   - {} nodes\n   - {} edges\nAverage node length: {}", graph.len(), nb_edges/2, node_length/graph.len());
            },
        }
    }
}


#[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Eq, Ord, Hash)]
struct MyKmerSize<const K: usize>;
impl<const K: usize> kmer::KmerSize for MyKmerSize<K> {
    fn K() -> usize {
        K
    }
}

pub fn main() {
    let cli = Cli::parse();
    let k_size = cli.k_size;
    let command = &cli.command;

    // macro to define the generic type Kmer, whih is known only at compile time
    macro_rules! kmer_size_match {
        ($($($n:expr)+ => $tp:ty$(,)?)+) => {
            match k_size {
                $($(
                    $n => {
                        type KmerSize = MyKmerSize<$n>;
                        type Kmer = kmer::VarIntKmer<$tp, KmerSize>;
                        command.run::<Kmer>();
                    },
                )+)+
                _ => unimplemented!()
            }
        };
    }
    // without generic constants, we have to match kmer_size one by one
    kmer_size_match!(
        1 2 3 4 => u8, 
        5 6 7 8 => u16,
        9 10 11 12 13 14 15 16 => u32,
        17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 => u64,
        // ... 
    );
}